#pragma once
#include <vector>
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>

enum class AssetType
{
	CPP, //CPP are automatically generated by any C++ files that inherit from GameAsset
	Resource //Resources consist of any non cpp files including textures and widgets
};

struct GameAsset
{
	GameAsset(unsigned int inID, std::string inPath, AssetType inType) :
		id(inID),
		path(inPath),
		type(inType)
	{

	}

	unsigned int id;
	std::string path;
	AssetType type;
};

class AssetManager
{
public:
	bool InitializeAssetDatabase();

	bool LoadAssetByID(unsigned int assetID)
	{

	}
	//bool LoadAssetByPath(char* assetPath);

	//template<typename AssetDataLayout>
	//GameAsset& CreateAsset(char* assetPath)
	//{
	//	GameAsset newAsset;
	//	newAsset.id = GetOrGenerateID();
	//	newAsset.type = AssetType::CPP;
	//	newAsset.path = assetPath;
	//}

	//bool MoveAssetByID(unsigned int assetToMoveID, char* newPath);
	//bool DestroyAssetByID(unsigned int assetID);
	//bool DestroyAssetByPath(char* assetPath);

	//TODO: Make this better
	unsigned int GetOrGenerateID()
	{
		static unsigned int highestID = 0;
		++highestID;
		return highestID;
	}

	bool GetIsInitialized() { return isInitialized; }

private:
	bool isInitialized;
	std::vector<GameAsset> gameAssets;
};
